/// –≠–∫—Ä–∞–Ω "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", –≠–û–ü
library;

import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:gap/gap.dart';
import 'package:super_bullet_list/bullet_list.dart';
import 'package:super_bullet_list/bullet_style.dart';
import 'package:url_launcher/url_launcher.dart';

import '/widgets/gradient_appbar.dart';

class AppInfo extends StatelessWidget {
  const AppInfo({super.key});

  launchURL() async {
    //<   –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—ã –∑–∞–≥—Ä—É–∑–∫–∏, –∞ —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–∏—Å–∏–º –∏ –∂–¥–µ–º...
    Uri url = Uri.parse('https://yandex.ru/legal/maps_termsofuse/');
    if (await launchUrl(url)) {
      await launchUrl(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    final cScheme = Theme.of(context).colorScheme;
    final tTheme = Theme.of(context).textTheme;

    //* –†–µ–∑–∏–Ω–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è
    final deviceSize = MediaQuery.sizeOf(context);
    //
    double max(double first, double second) {
      return first > second ? first : second;
    }

    double min(double first, double second) {
      return first < second ? first : second;
    }

    final scaleSideW = min(deviceSize.width, deviceSize.height);
    final scaleSideH = max(deviceSize.width, deviceSize.height);
    //
    final toolbarH = scaleSideH * .09;
    final horPadds = scaleSideW * .12;
    final setScaleFactor = scaleSideW * .0028;

    Widget topicText(String data) => Text(
          data,
          textScaleFactor: setScaleFactor,
        );

    final List<Widget> topics = [
      topicText('–ö–æ–ª–ª–µ–∫—Ü–∏—è "100 –ú–µ—Å—Ç", –≤–µ—Ä—Å–∏—è 1.1.1'),
      topicText('–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ç–µ—Ö —Å–∞–º—ã—Ö –º–µ—Å—Ç, –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–ª–æ –Ω–∞ –≤–∞—Å –Ω–µ–∏–∑–≥–ª–∞–¥–∏–º–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.'),
      topicText('–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.'),
      topicText('–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ú–µ—Å—Ç–∞.\n' '\n' '–Ø–Ω–¥–µ–∫—Å –≤–æ–æ–±—â–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π.'),
      Wrap(
        children: [
          topicText('–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ä—Ç–∞ –Ø–Ω–¥–µ–∫—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–Ω—è—Ç—ã–º–∏'),
          InkWell(
            child: Text(
              '—É—Å–ª–æ–≤–∏—è–º–∏.',
              textScaleFactor: setScaleFactor,
              style: TextStyle(
                color: cScheme.primaryContainer,
                decoration: TextDecoration.underline,
              ),
            ),
            onTap: () => launchURL(),
          ),
        ],
      ),
      topicText('–ï—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å –Ω–µ –≤—ã–¥–∞—ë—Ç –≤–∞–º –∞–¥—Ä–µ—Å –ø–æ –∑–∞–ø—Ä–æ—Å—É, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –æ–Ω –≤—ã–¥–∞—Å—Ç –µ–≥–æ –∑–∞–≤—Ç—Ä–∞. –ß—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.'),
      topicText('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —É–¥–∏–≤–ª–µ–Ω–∏–µ –∏ –Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ –ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–Ω—É—Ç—Ä–∏ –Ω–æ–≤—ã—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—ã–≤—à–µ–π –£–∫—Ä–∞–∏–Ω–µ.'),
    ];

    return Scaffold(
        appBar: AppBar(
          title: const Text(
            '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
            style: TextStyle(fontSize: 30),
          ),
          toolbarHeight: toolbarH,
          flexibleSpace: const GradientAppBar(),
        ),
        body: SingleChildScrollView(
          child: Column(
            children: [
              Stack(
                alignment: Alignment.bottomCenter,
                children: [
                  Positioned(
                      child: Text(
                    '100',
                    style: tTheme.displayLarge!.copyWith(
                      fontSize: 126,
                    ),
                  ).animate().fadeIn(duration: 2.seconds).scale(
                            duration: 2.seconds,
                            curve: Curves.easeOutBack,
                          )),
                  Positioned(
                      bottom: 14,
                      child: Text(
                        '–ú–ï–°–¢',
                        style: tTheme.titleMedium!.copyWith(
                          fontSize: 86,
                        ),
                      ).animate().fadeIn(duration: 3.seconds))
                ],
              ),
              Container(
                padding: EdgeInsets.symmetric(
                  horizontal: horPadds,
                ),
                child: SuperBulletList(
                  isOrdered: false,
                  style: BulletStyle.discFill,
                  iconColor: cScheme.tertiary,
                  iconSize: 5,
                  // customBullet: const Text('üî•'),
                  gap: 10,
                  items: topics,
                )
                    .animate(delay: 1.seconds)
                    .fadeIn(
                      duration: 900.ms,
                      delay: 300.ms,
                    )
                    .shimmer(
                      duration: 1.seconds,
                      blendMode: BlendMode.srcOver,
                      color: Colors.white12,
                    )
                    .move(
                      begin: const Offset(-30, 0),
                      curve: Curves.easeOutQuad,
                    ),
              ),
              const Gap(20),
              const MediaQueryImplementation(),
            ],
          ),
        ));
  }
}

/// MediaQuery implementation
class MediaQueryImplementation extends StatelessWidget {
  const MediaQueryImplementation({super.key});

  @override
  Widget build(BuildContext context) {
    final Size screenSize = MediaQuery.of(context).size;
    final double pixelRatio = MediaQuery.of(context).devicePixelRatio;
    final double textScaleFactor = MediaQuery.of(context).textScaleFactor;
    final Brightness platformBrightness = MediaQuery.of(context).platformBrightness;
    final EdgeInsets padding = MediaQuery.of(context).padding;
    final EdgeInsets viewInsets = MediaQuery.of(context).viewInsets;
    final EdgeInsets systemGestureInsets = MediaQuery.of(context).systemGestureInsets;
    final bool alwaysUse24HourFormat = MediaQuery.of(context).alwaysUse24HourFormat;
    final bool accessibleNavigation = MediaQuery.of(context).accessibleNavigation;
    final bool invertColors = MediaQuery.of(context).invertColors;
    final bool highContrast = MediaQuery.of(context).highContrast;

    return SizedBox(
      child: Text('=====================\n'
          '–°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
          '------------------------------------------\n'
          'Screen size: $screenSize\n'
          'Device pixel ratio: $pixelRatio\n'
          'Text scale factor: $textScaleFactor\n'
          'Platform brightness: $platformBrightness\n'
          'Padding: $padding\n'
          'View insets: $viewInsets\n'
          'System gesture insets: $systemGestureInsets\n'
          'Always use 24-hour format: $alwaysUse24HourFormat\n'
          'Accessible navigation: $accessibleNavigation\n'
          'Invert colors: $invertColors\n'
          'High contrast: $highContrast\n'),
    );
  }
}
